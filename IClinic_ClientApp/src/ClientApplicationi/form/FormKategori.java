/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormKategori.java
 *
 * Created on Jun 25, 2010, 9:28:14 PM
 */

package ClientApplicationi.form;

import ClientApplication.FormClient;
import ClientApplication.model.TableModelKategori;
import Database.Entity.Kategori;
import Database.Service.KategoriService;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Madridista
 */
public class FormKategori extends javax.swing.JFrame {

    private TableModelKategori tableModelKategori = new TableModelKategori();
    private KategoriService kategoriService;
    /** Creates new form FormKategori */
    public FormKategori(KategoriService kategoriService) {
        this.kategoriService = kategoriService;
        try{
            tableModelKategori.setData(this.kategoriService.getKategori());
        }catch(RemoteException exception){
            exception.printStackTrace();
        }
        initComponents();

        TableKategori.setModel(tableModelKategori);
        TableKategori.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int row = TableKategori.getSelectedRow();
                if(row != -1){
                    Kategori kategori = tableModelKategori.get(row);
                    Id_Kategori.setValue(kategori.getId_Kategori());
                    Nama_Kategori.setText(kategori.getNama_Kategori());
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableKategori = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Nama_Kategori = new javax.swing.JTextField();
        Id_Kategori = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        Insert = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Refresh = new javax.swing.JButton();
        Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableKategori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableKategori);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("KATEGORI"));

        jLabel1.setText("Id_Kategori");

        jLabel2.setText("Nama_Kategori");

        Id_Kategori.setEditable(false);
        Id_Kategori.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        Id_Kategori.setValue(new Long(0L));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Id_Kategori, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(Nama_Kategori, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Id_Kategori)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Nama_Kategori)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        Insert.setText("INSERT");
        Insert.setPreferredSize(new java.awt.Dimension(90, 30));
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });
        jPanel2.add(Insert);

        Update.setText("UPDATE");
        Update.setPreferredSize(new java.awt.Dimension(90, 30));
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanel2.add(Update);

        Delete.setText("DELETE");
        Delete.setPreferredSize(new java.awt.Dimension(90, 30));
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPanel2.add(Delete);

        Refresh.setText("REFRESH");
        Refresh.setPreferredSize(new java.awt.Dimension(90, 30));
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        jPanel2.add(Refresh);

        Exit.setText("EXIT");
        Exit.setPreferredSize(new java.awt.Dimension(90, 30));
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jPanel2.add(Exit);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        // TODO add your handling code here:
 if(Nama_Kategori.getText().equalsIgnoreCase("")){
       JOptionPane.showMessageDialog(null, "Data Yang Anda Inputkan Belum Lengkap");

   }
   else{

        try{
           Kategori kategori = new Kategori();
           kategori.setNama_Kategori(Nama_Kategori.getText());

           Kategori kategori1 = kategoriService.insertKategori(kategori);
           tableModelKategori.insert(kategori1);
        }catch(RemoteException exception){
            exception.printStackTrace();
        }
   }
    }//GEN-LAST:event_InsertActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
  if(Nama_Kategori.getText().equalsIgnoreCase("")){
       JOptionPane.showMessageDialog(null, "Data Yang Anda Inputkan Belum Lengkap");

   }
   else{
        try{

            int row = TableKategori.getSelectedRow();
            if(row == -1){
                return;
            }

           Kategori kategori =tableModelKategori.get(row);
           kategori.setNama_Kategori(Nama_Kategori.getText());

           kategoriService.updateKategori(kategori);
           tableModelKategori.update(row, kategori);
        }catch(RemoteException exception){
            exception.printStackTrace();
        }
   }
    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        try{

            int row = TableKategori.getSelectedRow();
            if(row == -1){
                return;
            }
        Long Id_Kategori = tableModelKategori.get(row).getId_Kategori();

           kategoriService.deleteKategori(Id_Kategori);
           tableModelKategori.delete(row);
        }catch(RemoteException exception){
            exception.printStackTrace();
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:
        try{
           List<Kategori> list = kategoriService.getKategori();
           tableModelKategori.setData(list);
        }catch(RemoteException exception){
            exception.printStackTrace();
        }
    }//GEN-LAST:event_RefreshActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        try {
          FormClient formClient = new FormClient();
            formClient.setVisible(true);
        } catch (RemoteException ex) {
            Logger.getLogger(FormKategori.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(FormKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ExitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton Exit;
    private javax.swing.JFormattedTextField Id_Kategori;
    private javax.swing.JButton Insert;
    private javax.swing.JTextField Nama_Kategori;
    private javax.swing.JButton Refresh;
    private javax.swing.JTable TableKategori;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
